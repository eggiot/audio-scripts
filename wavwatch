#!/usr/bin/env python3

import sys
import os
import time
import wave
import numpy as np
import matplotlib.pyplot as plt

def load_waveform(filename):
    """Load a waveform file and return time and amplitude arrays."""
    try:
        with wave.open(filename, 'rb') as wf:
            n_channels = wf.getnchannels()
            sampwidth = wf.getsampwidth()
            framerate = wf.getframerate()
            n_frames = wf.getnframes()
            raw_data = wf.readframes(n_frames)
        
        # Convert raw_data to numpy array
        dtype = {1: np.uint8, 2: np.int16, 4: np.int32}.get(sampwidth, np.uint8)
        data = np.frombuffer(raw_data, dtype=dtype)
        
        if n_channels > 1:
            data = data[0::n_channels]  # Take only the first channel
        
        time_axis = np.linspace(0, n_frames / framerate, num=len(data))
        return time_axis, data, framerate
    except Exception as e:
        print(f"Error loading {filename}: {e}")
        return None, None, None

def watch_file(filename):
    """Watches a WAV file and updates the display when it changes."""
    if not os.path.exists(filename):
        print(f"Error: {filename} does not exist.")
        sys.exit(1)
    
    plt.ion()  # Interactive mode
    fig, ax = plt.subplots()
    fig.patch.set_facecolor("black")  # Set window background to black
    ax.set_facecolor("black")  # Set plot background to black
    ax.spines['bottom'].set_color("#00FFFF")  # Neon cyan axis lines
    ax.spines['top'].set_color("#00FFFF")
    ax.spines['right'].set_color("#00FFFF")
    ax.spines['left'].set_color("#00FFFF")
    ax.xaxis.label.set_color("#00FFFF")  # Cyan labels
    ax.tick_params(axis='x', colors="#00FFFF")  # Cyan ticks
    ax.yaxis.set_visible(False)  # Hide y-axis
    ax.xaxis.set_ticks_position('none')  # Remove x-axis ticks
    ax.xaxis.set_tick_params(size=0)  # Remove tick marks
    ax.set_xticks([])  # Remove x-ticks entirely
    
    # Remove the Matplotlib toolbar
    fig.canvas.manager.toolbar.pack_forget()
    
    last_mtime = 0

    while True:
        try:
            if os.path.exists(filename):
                mtime = os.path.getmtime(filename)
                if mtime != last_mtime:
                    last_mtime = mtime
                    time_axis, data, framerate = load_waveform(filename)
                    
                    if data is not None:
                        ax.clear()
                        ax.set_facecolor("black")
                        ax.plot(time_axis, data, color='#FF00FF', linewidth=1.5, alpha=0.8)  # Neon magenta waveform
                        ax.set_title(f"Viewing: {filename}\nSampleRate: {framerate} Hz", color="#00FFFF", fontsize=12, fontweight='bold')
                        plt.draw()
            
            plt.pause(1.0)  # Check for updates every second
        except KeyboardInterrupt:
            print("Exiting viewer.")
            break

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: ./waveform_watcher.py <filename>")
        sys.exit(1)
    
    watch_file(sys.argv[1])
