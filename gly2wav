#!/bin/env python3

import numpy as np
import wave
import sys
from scipy.fft import ifft

def detect_extraction_method(gly_data, override_method=None):
    """
    Analyze the GLY file metadata and structure to determine the correct extraction method.
    Allows manual override if specified.
    """
    if override_method:
        print(f"Forcing extraction method: {override_method}")
        return override_method
    
    gly_int16 = np.frombuffer(gly_data, dtype=np.int16)
    
    # Extract first 200 bytes of metadata
    metadata_values = gly_int16[:100]  # Extract first 100 int16 values
    last_20_values = gly_int16[-20:]
    
    # Heuristic 1: If the last 20 values contain alternating zeros, it suggests harmonic synthesis
    if np.all(last_20_values[1::2] == 0) and np.std(last_20_values[::2]) > 5000:
        print("Detected harmonic synthesis due to structured zero pattern in metadata.")
        return "harmonic_synthesis"
    
    # Heuristic 2: If the first 100 values contain large spikes and structured zeros, it's likely synthesis
    zero_count = np.count_nonzero(metadata_values == 0)
    if zero_count > 30 and np.max(metadata_values) > 10000:
        print("Detected harmonic synthesis due to high zero-padding and large coefficient values.")
        return "harmonic_synthesis"
    
    # Heuristic 3: If metadata values vary continuously without repeating zero-padding, assume PCM
    if np.std(metadata_values) > 5000 and zero_count < 10:
        print("Detected raw PCM waveform due to continuous value variance.")
        return "pcm_standard"
    
    # Default to PCM extraction if uncertain
    print("Unclear format, defaulting to PCM extraction.")
    return "pcm_standard"

def convert_gly_to_wav(gly_file, wav_file, sample_rate=44100, force_method=None):
    """
    Convert an Absynth GLY file to a standard WAV file.
    Detects the correct extraction method based on metadata and structure,
    but allows manual override if specified.
    """
    # Read binary data
    with open(gly_file, "rb") as file:
        gly_data = file.read()
    
    # Determine extraction method (or use override)
    extraction_method = detect_extraction_method(gly_data, force_method)
    
    # Convert to int16
    waveform_int16 = np.frombuffer(gly_data, dtype=np.int16)
    
    # Find first non-zero sample to remove metadata padding
    nonzero_indices = np.where(waveform_int16 != 0)[0]
    if len(nonzero_indices) == 0:
        raise ValueError("No valid waveform data found in the GLY file.")
    first_nonzero_index = nonzero_indices[0]
    
    if extraction_method == "harmonic_synthesis":
        # Extract harmonic synthesis parameters
        harmonic_amplitudes = waveform_int16[-20:][::2]  # Take only the nonzero values
        harmonics = np.arange(1, len(harmonic_amplitudes) + 1)
        
        # Generate waveform using additive synthesis
        t = np.linspace(0, 1, 512, endpoint=False)
        reconstructed_waveform = np.zeros_like(t)
        for amp, harmonic in zip(harmonic_amplitudes, harmonics):
            reconstructed_waveform += amp * np.sin(2 * np.pi * harmonic * t)
        
        # Normalize to int16 range
        reconstructed_waveform = (reconstructed_waveform / np.max(np.abs(reconstructed_waveform))) * 32767
        waveform_final = reconstructed_waveform.astype(np.int16)
    else:
        # Default PCM extraction method
        print("Extracting raw PCM waveform...")
        waveform_extracted = waveform_int16[first_nonzero_index:first_nonzero_index + 1026]
        waveform_final = waveform_extracted[::2]  # Remove interleaving
    
    # Save as WAV file
    with wave.open(wav_file, "w") as wav:
        wav.setnchannels(1)  # Mono
        wav.setsampwidth(2)  # 16-bit
        wav.setframerate(sample_rate)
        wav.writeframes(waveform_final.astype(np.int16).tobytes())
    
    print(f"Converted {gly_file} -> {wav_file}")

if __name__ == "__main__":
    if len(sys.argv) < 3 or len(sys.argv) > 4:
        print("Usage: python convert_gly.py input.gly output.wav [force_method]")
        sys.exit(1)
    
    gly_file = sys.argv[1]
    wav_file = sys.argv[2]
    force_method = sys.argv[3] if len(sys.argv) == 4 else None
    
    convert_gly_to_wav(gly_file, wav_file, force_method=force_method)
