#!/bin/env python3
import wave
import numpy as np
import pyaudio
import argparse

def load_waveform(file_path):
    with wave.open(file_path, 'rb') as wf:
        num_channels = wf.getnchannels()
        sample_width = wf.getsampwidth()
        sample_rate = wf.getframerate()
        num_frames = wf.getnframes()
        raw_data = wf.readframes(num_frames)
    
    dtype_map = {1: np.int8, 2: np.int16, 4: np.int32}
    dtype = dtype_map.get(sample_width, np.int16)

    waveform = np.frombuffer(raw_data, dtype=dtype)
    
    if num_channels > 1:
        waveform = waveform.reshape(-1, num_channels).mean(axis=1)  # Convert to mono
    
    waveform = waveform.astype(np.float32) / np.iinfo(dtype).max  # Normalise to -1 to 1
    return waveform, sample_rate

def play_waveform(waveform, sample_rate):
    pa = pyaudio.PyAudio()

    stream = pa.open(format=pyaudio.paFloat32,
                     channels=1,
                     rate=sample_rate,
                     output=True)

    try:
        while True:
            stream.write(waveform.tobytes())  # Seamless looping
    except KeyboardInterrupt:
        pass
    finally:
        stream.stop_stream()
        stream.close()
        pa.terminate()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Play a single-cycle waveform seamlessly.")
    parser.add_argument("filename", type=str, help="Path to the WAV file.")
    
    args = parser.parse_args()
    
    waveform, sample_rate = load_waveform(args.filename)
    play_waveform(waveform, sample_rate)

